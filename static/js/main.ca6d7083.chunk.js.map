{"version":3,"sources":["components/Login.jsx","components/SignUp.jsx","App.jsx","serviceWorker.js","reducers/reducers.js","index.jsx"],"names":["Login","props","logIn","event","preventDefault","state","something","this","className","onSubmit","id","placeholder","htmlType","type","to","Component","SignUp","registation","thx","connect","myState","ku","path","component","Boolean","window","location","hostname","match","initialState","email","username","password","combineReducers","user","action","newState","payload","store","createStore","allReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VA0CeA,E,YArCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,MAAQ,SAAAC,GACNA,EAAMC,kBANN,EAAKC,MAAQ,CACXC,UAAW,OAHI,E,sEAWT,IACAA,EAAcC,KAAKF,MAAnBC,UACR,OACE,0BAAME,UAAU,OAAOC,SAAUF,KAAKL,OACnCI,EACD,yBAAKE,UAAU,aACb,0BAAMA,UAAU,eAAhB,UACA,kBAAC,IAAD,CAAOA,UAAU,cAAcE,GAAG,QAAQC,YAAY,sDAExD,yBAAKH,UAAU,aACb,0BAAMA,UAAU,eAAhB,yCACA,kBAAC,IAAD,CAAOA,UAAU,cAAcE,GAAG,WAAWC,YAAY,qFAE3D,yBAAKH,UAAU,aACb,kBAAC,IAAD,CAAQI,SAAS,SAASJ,UAAU,mBAAmBK,KAAK,WAA5D,kCAGA,kBAAC,IAAD,CAASC,GAAG,WACV,kBAAC,IAAD,CAAQD,KAAK,UAAb,6E,GA9BQE,aCyCLC,E,YAxCb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAMRgB,YAAc,SAAAd,GACZA,EAAMC,kBANN,EAAKC,MAAQ,CACXa,IAAK,MAHU,E,sEAWT,IACAA,EAAQX,KAAKF,MAAba,IACR,OACE,0BAAMV,UAAU,OAAOC,SAAUF,KAAKU,aACnCC,EACD,yBAAKV,UAAU,aACb,0BAAMA,UAAU,eAAhB,gGACA,kBAAC,IAAD,CAAOA,UAAU,cAAcE,GAAG,WAAWC,YAAY,4IAE3D,yBAAKH,UAAU,aACb,0BAAMA,UAAU,eAAhB,UACA,kBAAC,IAAD,CAAOA,UAAU,cAAcE,GAAG,QAAQC,YAAY,sDAExD,yBAAKH,UAAU,aACb,0BAAMA,UAAU,eAAhB,yCACA,kBAAC,IAAD,CAAOA,UAAU,cAAcE,GAAG,WAAWC,YAAY,qFAE3D,yBAAKH,UAAU,aACb,kBAAC,IAAD,CAAQI,SAAS,SAASJ,UAAU,mBAAmBK,KAAK,WAA5D,sEAGA,kBAAC,IAAD,CAASC,GAAG,UACV,kBAAC,IAAD,CAAQD,KAAK,UAAb,kG,GAlCSE,aCsBNI,mBAjBS,SAAAd,GACtB,MAAO,CACLe,QAASf,EAAMgB,MAeJF,EAXf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,SAASC,UAAWvB,IAChC,kBAAC,IAAD,CAAOsB,KAAK,UAAUC,UAAWP,SCPrBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DChBnC,IAAMC,EAAe,CACnBC,MAAO,GACPC,SAAU,GACVC,SAAU,IAcGC,cAAgB,CAAEC,KAXhB,WAAmC,IAAlC7B,EAAiC,uDAAzBwB,EAAcM,EAAW,uCAC3CC,EAAW/B,EACjB,OAAQ8B,EAAOtB,MACb,IAAK,cAEH,OADAuB,EAASN,MAAQK,EAAOE,QAAQP,MACzBM,EACT,QACE,OAAO/B,MCNPiC,EAAQC,YAAYC,EAAaf,OAAOgB,8BAAgChB,OAAOgB,gCAErFC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca6d7083.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      something: '111',\n    };\n  }\n\n  logIn = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    const { something } = this.state;\n    return (\n      <form className=\"form\" onSubmit={this.logIn}>\n        {something}\n        <div className=\"form__row\">\n          <span className=\"form__label\">Email:</span>\n          <Input className=\"form__input\" id=\"email\" placeholder=\"Введите email\" />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Пароль:</span>\n          <Input className=\"form__input\" id=\"password\" placeholder=\"Введите пароль\" />\n        </div>\n        <div className=\"form__row\">\n          <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n            Войти\n          </Button>\n          <NavLink to=\"/signup\">\n            <Button type=\"danger\">Регистрация</Button>\n          </NavLink>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { Button, Input } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thx: 'ku',\n    };\n  }\n\n  registation = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    const { thx } = this.state;\n    return (\n      <form className=\"form\" onSubmit={this.registation}>\n        {thx}\n        <div className=\"form__row\">\n          <span className=\"form__label\">Имя пользователя:</span>\n          <Input className=\"form__input\" id=\"username\" placeholder=\"Введите имя пользователя\" />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Email:</span>\n          <Input className=\"form__input\" id=\"email\" placeholder=\"Введите email\" />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Пароль:</span>\n          <Input className=\"form__input\" id=\"password\" placeholder=\"Введите пароль\" />\n        </div>\n        <div className=\"form__row\">\n          <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n            Регистрация\n          </Button>\n          <NavLink to=\"/login\">\n            <Button type=\"danger\">Уже есть аккаунт?</Button>\n          </NavLink>\n        </div>\n      </form>\n    );\n  }\n}\nexport default SignUp;\n","import React from 'react';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './styles/styles.scss';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\n\nconst mapStateToProps = state => {\n  return {\n    myState: state.ku,\n  };\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={SignUp} />\n      </BrowserRouter>\n    </div>\n  );\n}\n// export default App;\nexport default connect(mapStateToProps)(App);\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst initialState = {\n  email: '',\n  username: '',\n  password: '',\n};\n\nconst userForm = (state = initialState, action) => {\n  const newState = state;\n  switch (action.type) {\n    case 'EMAIL_INPUT':\n      newState.email = action.payload.email;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ user: userForm });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport allReducers from './reducers/reducers';\n\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); // eslint-disable-line\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}