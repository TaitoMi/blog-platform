{"version":3,"sources":["components/Login.jsx","actions/actions.js","components/Field.jsx","validationSchema.js","components/SignUp.jsx","App.jsx","serviceWorker.js","reducers/reducers.js","index.jsx"],"names":["Login","props","logIn","event","preventDefault","state","something","this","className","onSubmit","id","placeholder","htmlType","type","to","Component","registration","email","username","password","dispatch","a","async","fetch","method","headers","body","JSON","stringify","user","response","ok","payload","reg","json","then","err","action","error","errors","ku","Field","label","changer","blur","idName","value","touched","toUpperCase","slice","onChange","onBlur","name","validationSchema","Yup","shape","required","min","max","SignUp","registrationHandler","userData","isRegSuccessful","initialValues","values","setSubmitting","resetForm","handleChange","handleBlur","handleSubmit","isSubmitting","console","log","loading","connect","bindActionCreators","actions","usernameHandler","App","path","component","Boolean","window","location","hostname","match","initialState","combineReducers","store","createStore","allReducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.915fdf7c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      something: '111',\n    };\n  }\n\n  logIn = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    const { something } = this.state;\n    return (\n      <form className=\"form\" onSubmit={this.logIn}>\n        {something}\n        <div className=\"form__row\">\n          <span className=\"form__label\">Email:</span>\n          <Input className=\"form__input\" id=\"email\" placeholder=\"Введите email\" />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Пароль:</span>\n          <Input className=\"form__input\" id=\"password\" placeholder=\"Введите пароль\" />\n        </div>\n        <div className=\"form__row\">\n          <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n            Войти\n          </Button>\n          <NavLink to=\"/signup\">\n            <Button type=\"danger\">Регистрация</Button>\n          </NavLink>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","export const registration = ({ email, username, password }) => {\n  return async dispatch => {\n    const response = await fetch('https://conduit.productionready.io/api/users/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          username,\n          password,\n        },\n      }),\n    });\n    if (response.ok) {\n      return dispatch({\n        type: 'USER_REGISTERED',\n        payload: {\n          reg: 'Вы успешно зарегистрировались',\n        },\n      });\n    }\n    let action;\n    response.json().then(err => {\n      action = {\n        type: 'REG_ERROR',\n        payload: {\n          error: err.errors,\n        },\n      };\n    });\n    return dispatch(action);\n  };\n};\n\nconst ku = 'ku';\n\nexport default ku;\n","/* eslint-disable */\nimport React from 'react';\nimport { Input } from 'antd';\n\nconst Field = ({ label, changer, blur, idName, value, touched, error }) => {\n  return (\n    <>\n      <div className=\"form__row\">\n        <span className=\"form__label\">{label[0].toUpperCase() + label.slice(1)}</span>\n        <Input\n          placeholder={`Введите ${label}`}\n          onChange={changer}\n          onBlur={blur}\n          id={idName}\n          name={idName}\n          value={value}\n          className={`form__input ${touched && error ? 'has-error' : null}`}\n        />\n      </div>\n      {touched && error ? <div className=\"input__error\">{error}</div> : null}\n    </>\n  );\n};\n\nexport default Field;\n","import * as Yup from 'yup';\n\nconst isRequired = 'Обязательное поле';\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required(isRequired)\n    .min(4, 'Не меньше 4 символов')\n    .max(50, 'Не более 50 символов'),\n  password: Yup.string()\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40')\n    .required(isRequired),\n  email: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n});\n\nexport default validationSchema;\n","/* eslint-disable */\n\nimport React, { Component } from 'react';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as actions from '../actions/actions';\nimport Field from './Field';\nimport validationSchema from '../validationSchema';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  registrationHandler = userData => {\n    const { registration } = this.props;\n    registration(userData);\n  };\n\n  render() {\n    const { isRegSuccessful, error } = this.props;\n    return (\n      <Formik\n        initialValues={{\n          username: '',\n          password: '',\n          email: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          // setSubmitting(true);\n          this.registrationHandler(values);\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <>{JSON.stringify(values, null, 2)}</>\n            {console.log(isRegSuccessful, 'reg')}\n            <div>{isRegSuccessful}</div>\n            <Field\n              label=\"имя\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"username\"\n              value={values.username}\n              touched={touched.username}\n              error={errors.username}\n            />\n            <Field\n              label=\"email\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"email\"\n              value={values.email}\n              touched={touched.email}\n              error={errors.email}\n            />\n            <Field\n              label=\"пароль\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"password\"\n              value={values.password}\n              touched={touched.password}\n              error={errors.password}\n            />\n            <div className=\"form__row\">\n              <Button\n                loading={isSubmitting}\n                className=\"form__submit-btn\"\n                htmlType=\"submit\"\n                type=\"primary\"\n              >\n                Зарегистрироваться\n              </Button>\n              <NavLink to=\"/login\">\n                <Button type=\"danger\">Уже есть аккаунт?</Button>\n              </NavLink>\n            </div>\n            {isRegSuccessful ? <div>{isRegSuccessful}</div> : null}\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    email: state.user.email,\n    username: state.user.username,\n    password: state.user.password,\n    isRegSuccessful: state.user.isRegSuccessful,\n    error: state.user.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { usernameHandler, registration } = bindActionCreators(actions, dispatch);\n  return {\n    usernameHandler,\n    registration,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './styles/styles.scss';\nimport { BrowserRouter, NavLink, Route } from 'react-router-dom';\nimport { Button } from 'antd';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavLink to=\"/login\">\n          <Button type=\"primary\">Login</Button>\n        </NavLink>\n        <NavLink to=\"/signup\">\n          <Button type=\"danger\">Registration</Button>\n        </NavLink>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={SignUp} />\n      </BrowserRouter>\n    </div>\n  );\n}\n// export default App;\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst initialState = {\n  email: '',\n  username: '',\n  password: '',\n  isRegSuccessful: '',\n  error: null,\n};\n\nconst userForm = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case 'USER_REGISTERED':\n      return { ...state, isRegSuccessful: payload.reg };\n    case 'REG_ERROR':\n      return { ...state, error: payload.error };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ user: userForm });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport allReducers from './reducers/reducers';\n\nconst store = createStore(allReducers, composeWithDevTools(applyMiddleware(thunk))); // eslint-disable-line\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}