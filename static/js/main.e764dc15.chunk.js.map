{"version":3,"sources":["components/Login.jsx","actions/actions.js","components/SignUp.jsx","App.jsx","serviceWorker.js","reducers/reducers.js","index.jsx"],"names":["Login","props","logIn","event","preventDefault","state","something","this","className","onSubmit","id","placeholder","htmlType","type","to","Component","emailHandler","payload","text","target","value","usernameHandler","ku","SignUp","registation","thx","email","username","password","onChange","connect","dispatch","bindActionCreators","actions","App","path","component","Boolean","window","location","hostname","match","initialState","combineReducers","user","action","newState","console","log","store","createStore","allReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e764dc15.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      something: '111',\n    };\n  }\n\n  logIn = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    const { something } = this.state;\n    return (\n      <form className=\"form\" onSubmit={this.logIn}>\n        {something}\n        <div className=\"form__row\">\n          <span className=\"form__label\">Email:</span>\n          <Input className=\"form__input\" id=\"email\" placeholder=\"Введите email\" />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Пароль:</span>\n          <Input className=\"form__input\" id=\"password\" placeholder=\"Введите пароль\" />\n        </div>\n        <div className=\"form__row\">\n          <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n            Войти\n          </Button>\n          <NavLink to=\"/signup\">\n            <Button type=\"danger\">Регистрация</Button>\n          </NavLink>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","export const emailHandler = event => {\n  return {\n    type: 'EMAIL_INPUT',\n    payload: {\n      text: event.target.value,\n    },\n  };\n};\n\nexport const usernameHandler = event => {\n  return {\n    type: 'USERNAME_INPUT',\n    payload: {\n      text: event.target.value,\n    },\n  };\n};\n\nconst ku = 'ku';\n\nexport default ku;\n","import React, { Component } from 'react';\nimport { Button, Input } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/actions';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thx: 'ku',\n    };\n  }\n\n  registation = event => {\n    event.preventDefault();\n  };\n\n  render() {\n    const { thx } = this.state;\n    // eslint-disable-next-line react/prop-types\n    const { email, username, password, emailHandler, usernameHandler } = this.props;\n    return (\n      <form className=\"form\" onSubmit={this.registation}>\n        {thx}\n        <div className=\"form__row\">\n          <span className=\"form__label\">Имя пользователя:</span>\n          <Input\n            className=\"form__input\"\n            value={username}\n            placeholder=\"Введите имя пользователя\"\n            onChange={usernameHandler}\n          />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Email:</span>\n          <input type=\"text\" value={email} onChange={emailHandler} />\n          <Input\n            className=\"form__input\"\n            value={email}\n            placeholder=\"Введите email\"\n            onChange={emailHandler}\n          />\n        </div>\n        <div className=\"form__row\">\n          <span className=\"form__label\">Пароль:</span>\n          <Input className=\"form__input\" value={password} placeholder=\"Введите пароль\" />\n        </div>\n        <div className=\"form__row\">\n          <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n            Регистрация\n          </Button>\n          <NavLink to=\"/login\">\n            <Button type=\"danger\">Уже есть аккаунт?</Button>\n          </NavLink>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ email, username, password }) => {\n  return {\n    email,\n    username,\n    password,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { emailHandler, usernameHandler } = bindActionCreators(actions, dispatch);\n  return {\n    emailHandler,\n    usernameHandler,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './styles/styles.scss';\nimport { BrowserRouter, NavLink, Route } from 'react-router-dom';\nimport { Button } from 'antd';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavLink to=\"/login\">\n          <Button type=\"primary\">Login</Button>\n        </NavLink>\n        <NavLink to=\"/signup\">\n          <Button type=\"danger\">Registration</Button>\n        </NavLink>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={SignUp} />\n      </BrowserRouter>\n    </div>\n  );\n}\n// export default App;\nexport default App;\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\n\nconst initialState = {\n  email: '',\n  username: '',\n  password: '',\n};\n\nconst userForm = (state = initialState, action) => {\n  const newState = state;\n  switch (action.type) {\n    case 'EMAIL_INPUT':\n      newState.email = action.payload.text;\n      console.log(typeof newState.email);\n      return newState;\n    case 'USERNAME_INPUT':\n      newState.username = action.payload.text;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ user: userForm });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport allReducers from './reducers/reducers';\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); // eslint-disable-line\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}