{"version":3,"sources":["images/realworld.png","validationSchema.js","components/Field.jsx","actions/actions.js","components/Login.jsx","components/SignUp.jsx","components/Header.jsx","App.jsx","serviceWorker.js","reducers/reducers.js","index.jsx"],"names":["module","exports","isRequired","validationSchema","Yup","shape","username","required","min","max","password","loginPassword","email","loginEmail","Field","label","changer","blur","idName","value","touched","error","apiError","className","toUpperCase","slice","placeholder","onChange","onBlur","id","name","registration","dispatch","a","async","fetch","method","headers","body","JSON","stringify","user","response","ok","type","payload","reg","json","then","err","errors","action","login","console","log","ku","Login","props","loginHandler","state","this","initialValues","onSubmit","values","handleChange","handleBlur","htmlType","to","Component","defaultProps","connect","bindActionCreators","actions","SignUp","registrationHandler","userData","isSuccessful","setSubmitting","resetForm","handleSubmit","src","Logo","alt","App","isAuthorized","exact","path","render","component","Boolean","window","location","hostname","match","initialState","combineReducers","store","createStore","allReducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.5dcf3b69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/realworld.ea1785a0.png\";","import * as Yup from 'yup';\n\nconst isRequired = 'Обязательное поле';\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required(isRequired)\n    .min(4, 'Не меньше 4 символов')\n    .max(50, 'Не более 50 символов'),\n  password: Yup.string()\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40'),\n  loginPassword: Yup.string()\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40')\n    .required(isRequired),\n  email: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n  loginEmail: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n});\n\nexport default validationSchema;\n","/* eslint-disable */\nimport React from 'react';\nimport { Input } from 'antd';\n\nconst Field = ({\n                 label,\n                 changer,\n                 blur,\n                 idName,\n                 value,\n                 touched,\n                 error,\n               apiError }) => {\n  return (\n    <>\n      <div className=\"form__row\">\n        <span className=\"form__label\">{label[0].toUpperCase() + label.slice(1)}</span>\n        <Input\n          placeholder={`Введите ${label}`}\n          onChange={changer}\n          onBlur={blur}\n          id={idName}\n          name={idName}\n          value={value}\n          className={`form__input ${touched && error ? 'has-error' : null}`}\n        />\n      </div>\n      {touched && error ? <div className=\"input__error\">{error}</div> : null}\n      {apiError ? <div className=\"input__error\">{apiError}</div> : null}\n    </>\n  );\n};\n\nexport default Field;\n","export const registration = ({ email, username, password }) => {\n  return async dispatch => {\n    const response = await fetch('https://conduit.productionready.io/api/users/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          username,\n          password,\n        },\n      }),\n    });\n    if (response.ok) {\n      return dispatch({\n        type: 'USER_REGISTERED',\n        payload: {\n          reg: true,\n        },\n      });\n    }\n    const action = await response.json().then(err => {\n      return {\n        type: 'REG_ERROR',\n        payload: {\n          error: err.errors,\n        },\n      };\n    });\n    return dispatch(action);\n  };\n};\n\nexport const login = ({ email, password }) => async dispatch => {\n  const response = await fetch('https://conduit.productionready.io/api/users/login/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      user: {\n        email,\n        password,\n      },\n    }),\n  });\n  console.log(response);\n  return dispatch({ type: 'ku' });\n};\n\nconst ku = 'ku';\n\nexport default ku;\n","import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport validationSchema from '../validationSchema';\nimport Field from './Field';\nimport * as actions from '../actions/actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  loginHandler = user => {\n    const { login } = this.props;\n    login(user);\n  };\n\n  render() {\n    const { error } = this.props;\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          email: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={values => {\n          console.log('asdasdasd');\n          this.loginHandler(values);\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur }) => (\n          <Form className=\"form\">\n            <Field\n              label=\"email\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"email\"\n              value={values.email}\n              touched={touched.email}\n              error={errors.email}\n              apiError={error ? error.email : null}\n            />\n            <Field\n              label=\"пароль\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"password\"\n              value={values.password}\n              touched={touched.password}\n              error={errors.password}\n              apiError={error ? error.password : null}\n            />\n            <div className=\"form__row\">\n              <Button className=\"form__submit-btn\" htmlType=\"submit\" type=\"primary\">\n                Войти\n              </Button>\n              <NavLink to=\"/signup\">\n                <Button type=\"danger\">Зарегистрироваться</Button>\n              </NavLink>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nLogin.defaultProps = {\n  login: null,\n  error: null,\n};\n\nLogin.propTypes = {\n  login: PropTypes.func,\n  error: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string])),\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.user.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { login } = bindActionCreators(actions, dispatch);\n  return {\n    login,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","/* eslint-disable */\n\nimport React, { Component } from 'react';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as actions from '../actions/actions';\nimport Field from './Field';\nimport validationSchema from '../validationSchema';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  registrationHandler = userData => {\n    const { registration } = this.props;\n    registration(userData);\n  };\n\n  render() {\n    const { isSuccessful, error } = this.props;\n    return (\n      <Formik\n        initialValues={{\n          username: '',\n          password: '',\n          email: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          // setSubmitting(true);\n          this.registrationHandler(values);\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <Field\n              label=\"имя\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"username\"\n              value={values.username}\n              touched={touched.username}\n              error={errors.username}\n              apiError={ error ? error.username : null }\n            />\n            <Field\n              label=\"email\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"email\"\n              value={values.email}\n              touched={touched.email}\n              error={errors.email}\n              apiError={ error ? error.email : null}\n            />\n            <Field\n              label=\"пароль\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"password\"\n              value={values.password}\n              touched={touched.password}\n              error={errors.password}\n              apiError={ error ? error.password : null}\n            />\n            <div className=\"form__row\">\n              <Button\n                className=\"form__submit-btn\"\n                htmlType=\"submit\"\n                type=\"primary\"\n              >\n                Зарегистрироваться\n              </Button>\n              <NavLink to=\"/login\">\n                <Button type=\"danger\">Уже есть аккаунт?</Button>\n              </NavLink>\n            </div>\n            {isSuccessful ? <div>Вы успешно зарегистрировались</div> : null}\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSuccessful: state.user.isSuccessful,\n    error: state.user.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { registration } = bindActionCreators(actions, dispatch);\n  return {\n    registration,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Logo from '../images/realworld.png';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__left\">\n        <NavLink to=\"/\">\n          <img className=\"header__logo\" src={Logo} alt=\"Логотип RealWorld\" />\n        </NavLink>\n      </div>\n      <div className=\"header__right\">\n        <NavLink to=\"/login\">\n          <Button className=\"header__button\" type=\"primary\">\n            Login\n          </Button>\n        </NavLink>\n        <NavLink to=\"/signup\">\n          <Button className=\"header__button\" type=\"danger\">\n            Registration\n          </Button>\n        </NavLink>\n      </div>\n    </header>\n  );\n};\n\nexport default connect()(Header);\n","import React from 'react';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './styles/styles.scss';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport Header from './components/Header';\n\nconst App = props => {\n  const { isAuthorized } = props;\n  const render = () => (isAuthorized ? <Redirect to=\"/login\" /> : null);\n  return (\n    <BrowserRouter>\n      <Header />\n      <div className=\"App\">\n        <Route exact path=\"/\" render={render()} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={SignUp} />\n      </div>\n    </BrowserRouter>\n  );\n};\n\nApp.defaultProps = {\n  isAuthorized: null,\n};\n\nApp.propTypes = {\n  isAuthorized: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({ isAuthorized: state.user.isAuthorized });\n\nexport default connect(mapStateToProps)(App);\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst initialState = {\n  email: '',\n  username: '',\n  password: '',\n  isSuccessful: '',\n  error: null,\n  isAuthorized: null,\n};\n\nconst userForm = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case 'USER_REGISTERED':\n      return { ...state, isSuccessful: payload.reg, error: null };\n    case 'REG_ERROR':\n      return { ...state, isSuccessful: null, error: payload.error };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ user: userForm });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport allReducers from './reducers/reducers';\n\nconst store = createStore(allReducers, composeWithDevTools(applyMiddleware(thunk))); // eslint-disable-line\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}