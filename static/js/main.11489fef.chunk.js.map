{"version":3,"sources":["images/realworld.png","components/Field.jsx","actions/registration.js","actions/login.js","actions/createArticle.js","actions/actions.js","components/Login.jsx","components/SignUp.jsx","components/Header.jsx","components/MainPage.jsx","components/CreateArticle.jsx","App.jsx","serviceWorker.js","reducers/reducers.js","index.jsx"],"names":["module","exports","Field","label","changer","blur","idName","value","touched","error","apiError","className","toUpperCase","slice","placeholder","onChange","onBlur","id","name","defaultProps","registration","email","username","password","dispatch","a","async","fetch","method","headers","body","JSON","stringify","user","response","ok","type","payload","reg","json","then","err","errors","action","login","createArticle","values","token","Authorization","article","console","log","clear","exit","validationSchema","Yup","shape","min","max","required","Login","isAuthorized","exact","path","render","to","initialValues","onSubmit","handleChange","handleBlur","Password","htmlType","onClick","connect","state","bindActionCreators","actions","SignUp","isSuccessful","setSubmitting","NavBar","src","Logo","alt","MainPage","title","description","tagList","newValues","filter","el","arrayHelpers","map","tag","index","newIndex","key","push","App","props","component","CreateArticle","Boolean","window","location","hostname","match","initialState","combineReducers","articles","store","createStore","allReducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.11489fef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/realworld.ea1785a0.png\";","import React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst Field = ({ label, changer, blur, idName, value, touched, error, apiError }) => {\n  return (\n    <>\n      <div className=\"form__row\">\n        <span className=\"form__label\">{label[0].toUpperCase() + label.slice(1)}</span>\n        <Input\n          placeholder={`Введите ${label}`}\n          onChange={changer}\n          onBlur={blur}\n          id={idName}\n          name={idName}\n          value={value}\n          className={`form__input ${touched && error ? 'has-error' : ''}`}\n        />\n      </div>\n      {touched && error ? <div className=\"input__error\">{error}</div> : null}\n      {apiError ? <div className=\"input__error\">{apiError}</div> : null}\n    </>\n  );\n};\n\nField.defaultProps = {\n  label: '',\n  idName: '',\n  value: '',\n  error: '',\n  apiError: '',\n  changer: null,\n  blur: null,\n  touched: null,\n};\n\nField.propTypes = {\n  label: PropTypes.string,\n  idName: PropTypes.string,\n  value: PropTypes.string,\n  error: PropTypes.string,\n  apiError: PropTypes.string,\n  changer: PropTypes.func,\n  blur: PropTypes.func,\n  touched: PropTypes.bool,\n};\n\nexport default Field;\n","/* eslint-disable */\nexport const registration = ({ email, username, password }) => {\n  return async dispatch => {\n    const response = await fetch('https://conduit.productionready.io/api/users/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          username,\n          password,\n        },\n      }),\n    });\n    if (response.ok) {\n      return dispatch({\n        type: 'USER_REGISTERED',\n        payload: {\n          reg: true,\n        },\n      });\n    }\n    const action = await response.json().then(err => {\n      return {\n        type: 'REG_ERROR',\n        payload: {\n          error: err.errors,\n        },\n      };\n    });\n    return dispatch(action);\n  };\n};\n","/* eslint-disable */\nexport const login = ({ email, password }) => async dispatch => {\n  const response = await fetch('https://conduit.productionready.io/api/users/login/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      user: {\n        email,\n        password,\n      },\n    }),\n  });\n  if (response.ok) {\n    const action = await response.json().then(user => {\n      return {\n        type: 'USER_LOGIN',\n        payload: {\n          ...user,\n        },\n      };\n    });\n    return dispatch(action);\n  }\n  const action = await response.json().then(() => {\n    return {\n      type: 'LOGIN_ERROR',\n    };\n  });\n  return dispatch(action);\n};\n","/* eslint-disable */\nexport const createArticle = (values, token) => async dispatch => {\n  const response = await fetch('https://conduit.productionready.io/api/articles', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`,\n    },\n    body: JSON.stringify({\n      article: { ...values },\n    }),\n  });\n  console.log(response.json());\n\n  return 'ku';\n};\n","import { registration } from './registration';\nimport { login } from './login';\nimport { createArticle } from './createArticle';\n\nexport { registration, login, createArticle };\n\nexport const clear = () => ({ type: 'ERROR_CLEAR' });\n\nexport const exit = () => ({ type: 'LOGIN_EXIT' });\n","import React from 'react';\nimport { Button, Input } from 'antd';\nimport { NavLink, Redirect, Route } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport Field from './Field';\nimport * as actions from '../actions/actions';\n\nconst isRequired = 'Обязательное поле';\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40'),\n  email: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n});\n\nconst Login = ({ error, isAuthorized, login, clear }) => {\n  const loginHandler = user => {\n    login(user);\n  };\n  const render = () => (isAuthorized ? <Redirect to=\"/\" /> : null);\n  return (\n    <>\n      <Route exact path=\"/login\" render={render} />\n      <Formik\n        initialValues={{\n          password: '',\n          email: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={values => {\n          loginHandler(values);\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur }) => (\n          <Form className=\"form\">\n            {error ? <div>Неправильный email или пароль</div> : null}\n            <Field\n              label=\"email\"\n              changer={handleChange}\n              blur={handleBlur}\n              idName=\"email\"\n              value={values.email}\n              touched={touched.email}\n              error={errors.email}\n              apiError={error ? error.email : null}\n            />\n            <div className=\"form__row\">\n              <span className=\"form__label\">Введите пароль</span>\n              <Input.Password\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n                id=\"password\"\n                name=\"password\"\n              />\n            </div>\n            <div className=\"form__row\">\n              <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n                Войти\n              </Button>\n              <NavLink to=\"/signup\" onClick={clear}>\n                <Button type=\"danger\">Зарегистрироваться</Button>\n              </NavLink>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nLogin.defaultProps = {\n  login: null,\n  error: null,\n  isAuthorized: null,\n  clear: null,\n};\n\nLogin.propTypes = {\n  login: PropTypes.func,\n  error: PropTypes.bool,\n  isAuthorized: PropTypes.bool,\n  clear: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.user.error,\n    isAuthorized: state.user.isAuthorized,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { login, clear } = bindActionCreators(actions, dispatch);\n  return {\n    login,\n    clear,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { Button, Input } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport * as actions from '../actions/actions';\nimport Field from './Field';\n\nconst isRequired = 'Обязательное поле';\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required(isRequired)\n    .min(4, 'Не меньше 4 символов')\n    .max(50, 'Не более 50 символов'),\n  password: Yup.string()\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40'),\n  email: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n});\n\nconst SignUp = ({ isSuccessful, error, clear, registration }) => {\n  const registrationHandler = userData => {\n    registration(userData);\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        password: '',\n        email: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { setSubmitting }) => {\n        setSubmitting(isSuccessful);\n        registrationHandler(values);\n      }}\n    >\n      {({ values, errors, touched, handleChange, handleBlur }) => (\n        <Form className=\"form\">\n          <Field\n            label=\"имя\"\n            changer={handleChange}\n            blur={handleBlur}\n            idName=\"username\"\n            value={values.username}\n            touched={touched.username}\n            error={errors.username}\n            apiError={error ? error.username : null}\n          />\n          <Field\n            label=\"email\"\n            changer={handleChange}\n            blur={handleBlur}\n            idName=\"email\"\n            value={values.email}\n            touched={touched.email}\n            error={errors.email}\n            apiError={error ? error.email : null}\n          />\n          <div className=\"form__row\">\n            <span className=\"form__label\">Введите пароль</span>\n            <Input.Password\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              id=\"password\"\n              name=\"password\"\n            />\n          </div>\n          {/* <Field */}\n          {/*  label=\"пароль\" */}\n          {/*  changer={handleChange} */}\n          {/*  blur={handleBlur} */}\n          {/*  idName=\"password\" */}\n          {/*  value={values.password} */}\n          {/*  touched={touched.password} */}\n          {/*  error={errors.password} */}\n          {/*  apiError={error ? error.password : null} */}\n          {/* /> */}\n          <div className=\"form__row\">\n            <Button className=\"form__submit-btn\" htmlType=\"submit\" type=\"primary\">\n              Зарегистрироваться\n            </Button>\n            <NavLink to=\"/login\" onClick={clear}>\n              <Button type=\"danger\">Уже есть аккаунт?</Button>\n            </NavLink>\n          </div>\n          {isSuccessful ? <div>Вы успешно зарегистрировались</div> : null}\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nSignUp.defaultProps = {\n  registration: null,\n  isSuccessful: null,\n  error: null,\n  clear: null,\n};\n\nSignUp.propTypes = {\n  registration: PropTypes.func,\n  isSuccessful: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string])),\n  clear: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n  return {\n    isSuccessful: state.user.isSuccessful,\n    error: state.user.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { registration, clear } = bindActionCreators(actions, dispatch);\n  return {\n    registration,\n    clear,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","/* eslint-disable */\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button } from 'antd';\nimport Logo from '../images/realworld.png';\n\nconst Header = ({ isAuthorized }) => {\n  const NavBar = isAuthorized ? (\n    <div className=\"header__right\">\n      <NavLink to=\"/\">\n        <Button type=\"primary\">Личный кабинет</Button>\n      </NavLink>\n    </div>\n  ) : (\n    <div className=\"header__right\">\n      <NavLink to=\"/login\">\n        <Button type=\"primary\">Войти</Button>\n      </NavLink>\n      <NavLink to=\"/signup\">\n        <Button type=\"danger\">Зарегистрироваться</Button>\n      </NavLink>\n    </div>\n  );\n  return (\n    <header className=\"header\">\n      <div className=\"header__left\">\n        <NavLink to=\"/\">\n          <img className=\"header__logo\" src={Logo} alt=\"Логотип RealWorld\" />\n        </NavLink>\n      </div>\n      {NavBar}\n    </header>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthorized: state.user.isAuthorized,\n  };\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\nimport { bindActionCreators } from 'redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../actions/actions';\n\nconst MainPage = ({ id, email, username, exit }) => {\n  return (\n    <form className=\"user\" onSubmit={exit}>\n      <div className=\"user__info\">\n        <div className=\"user__row\">id: {id}</div>\n        <div className=\"user__row\">email: {email}</div>\n        <div className=\"user__row\">username: {username}</div>\n      </div>\n      <NavLink to=\"/add\">\n        <Button type=\"primary\">Создать страницу</Button>\n      </NavLink>\n      <Button htmlType=\"submit\" className=\"user__btn\" type=\"danger\">\n        Выход\n      </Button>\n    </form>\n  );\n};\n\nMainPage.defaultProps = {\n  id: '',\n  email: '',\n  username: '',\n  exit: null,\n};\n\nMainPage.propTypes = {\n  id: PropTypes.string,\n  email: PropTypes.string,\n  username: PropTypes.string,\n  exit: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n  return {\n    id: state.user.id,\n    email: state.user.email,\n    username: state.user.username,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { exit } = bindActionCreators(actions, dispatch);\n  return {\n    exit,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);\n","/* eslint-disable */\nimport React from 'react';\nimport { Form, Formik, FieldArray } from 'formik';\nimport { Button, Input } from 'antd';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../actions/actions';\nimport Field from './Field';\n\nconst CreateArticle = ({ isAuthorized, createArticle, token, login }) => {\n  return (\n    <Formik\n      initialValues={{\n        title: '',\n        description: '',\n        body: '',\n        tagList: [''],\n      }}\n      onSubmit={values => {\n        // if(!isAuthorized) {\n        //   alert('Необходима авторизация')\n        //   return;\n        // }\n        const newValues = { ...values, tagList: values.tagList.filter(el => el !== '') };\n        createArticle(newValues, token);\n      }}\n    >\n      {({ values, errors, touched, handleChange, handleBlur }) => (\n        <Form className=\"form\">\n          <Field\n            label=\"title\"\n            changer={handleChange}\n            blur={handleBlur}\n            idName=\"title\"\n            value={values.title}\n            touched={touched.title}\n            error={errors.title}\n          />\n          <Field\n            label=\"description\"\n            changer={handleChange}\n            blur={handleBlur}\n            idName=\"description\"\n            value={values.description}\n            touched={touched.description}\n            error={errors.description}\n          />\n          <Field\n            label=\"body\"\n            changer={handleChange}\n            blur={handleBlur}\n            idName=\"body\"\n            value={values.body}\n            touched={touched.body}\n            error={errors.body}\n          />\n          <FieldArray\n            name=\"tagList\"\n            render={arrayHelpers => (\n              <>\n                <div className=\"form__row-tags\">\n                  {values.tagList.map((tag, index) => {\n                    const newIndex = `tag-${index}`;\n                    return (\n                      <div key={newIndex} className=\"form__row\">\n                        <Input\n                          className=\"form__tag\"\n                          placeholder=\"Введите тэг\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.tagList[index]}\n                          id={`tagList${index}`}\n                          name={`tagList.${index}`}\n                        />\n                      </div>\n                    );\n                  })}\n                </div>\n                <Button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  Добавить тэг\n                </Button>\n              </>\n            )}\n          />\n          <div className=\"form__row\">\n            <Button htmlType=\"submit\" className=\"form__submit-btn\" type=\"primary\">\n              Создать статью\n            </Button>\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => login({ email: 'gfdaker96@gmail.com', password: '321zxc321' })}\n          >\n            login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthorized: state.user.isAuthorized,\n    token: state.user.token,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const { createArticle, login } = bindActionCreators(actions, dispatch);\n  return {\n    createArticle,\n    login,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateArticle);\n","import React from 'react';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './styles/styles.scss';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport Header from './components/Header';\nimport MainPage from './components/MainPage';\nimport CreateArticle from './components/CreateArticle';\n\nconst App = props => {\n  const { isAuthorized } = props;\n  const render = () => (!isAuthorized ? <Redirect to=\"/login\" /> : <MainPage />);\n  return (\n    <BrowserRouter>\n      <Header />\n      <div className=\"App\">\n        <Route exact path=\"/\" render={render} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={SignUp} />\n        <Route path=\"/add\" component={CreateArticle} />\n      </div>\n    </BrowserRouter>\n  );\n};\n\nApp.defaultProps = {\n  isAuthorized: null,\n};\n\nApp.propTypes = {\n  isAuthorized: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({ isAuthorized: state.user.isAuthorized });\n\nexport default connect(mapStateToProps)(App);\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\n\nconst initialState = {\n  isSuccessful: null,\n  error: null,\n  isAuthorized: null,\n};\n\nconst userForm = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case 'USER_REGISTERED':\n      return { ...state, isSuccessful: payload.reg, error: null };\n    case 'REG_ERROR':\n      return { ...state, isSuccessful: null, error: payload.error };\n    case 'USER_LOGIN':\n      return { ...state, ...payload.user, isAuthorized: true };\n    case 'LOGIN_ERROR':\n      return { ...state, error: true };\n    case 'LOGIN_EXIT':\n      return { ...initialState };\n    case 'ERROR_CLEAR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nconst articles = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ user: userForm, articles });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport allReducers from './reducers/reducers';\n\nconst store = createStore(allReducers, composeWithDevTools(applyMiddleware(thunk))); // eslint-disable-line\r\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}